<!-- Tech-focused 3D Loader -->
<div id="loader" class="fixed inset-0 z-[99999] overflow-hidden bg-[#0a192f]">
  <div class="absolute inset-0 bg-[#0a192f]"></div>
  <div class="absolute inset-0 backdrop-blur-sm"></div>
  <div class="fixed inset-0 flex items-center justify-center">
    <div class="loader-container text-center">
      <div id="cube-container" class="w-32 h-32 mx-auto mb-8"></div>
      <div class="text-container">
        <div class="text-[#64ffda] text-xl font-mono typing-text">
          > Loading an awesome Rubyist
        </div>
        <div class="loading-bar mt-4 w-64 h-2 bg-[#112240] rounded-full overflow-hidden">
          <div class="progress-bar h-full bg-[#64ffda] rounded-full"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  html.loading {
    overflow: hidden !important;
    height: 100% !important;
    width: 100% !important;
    position: fixed !important;
  }

  body.loading {
    overflow: hidden !important;
    height: 100% !important;
    width: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    position: fixed !important;
  }

  body.loading header,
  body.loading nav,
  body.loading footer {
    display: none !important;
  }

  #loader {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    z-index: 99999 !important;
    min-height: 100vh !important;
    width: 100vw !important;
    margin: 0 !important;
    padding: 0 !important;
    background-color: #343541 !important;
  }

  #loader .message {
    opacity: 0;
    transform: translateY(20px);
    animation: loaderSlideIn 0.5s forwards;
  }

  .typing-text-user,
  .typing-text-assistant {
    display: inline-block;
    width: 0;
    white-space: nowrap;
    overflow: hidden;
  }

  .typing-text-user {
    animation: typing 1s steps(30, end) forwards;
  }

  .typing-text-assistant {
    animation: typing 1s steps(30, end) forwards;
    animation-delay: 2s;
  }

  .typing-text-user::after,
  .typing-text-assistant::after {
    content: '';
    display: inline-block;
    background-color: #fff;
    width: 6px;
    height: 16px;
    margin-left: 4px;
    animation: blink 1s infinite;
    vertical-align: text-top;
    position: relative;
    top: 2px;
  }

  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }

  @keyframes loaderSlideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }

  #loader.fade-out {
    opacity: 0 !important;
    pointer-events: none !important;
    transition: opacity 0.5s ease-in-out !important;
  }

  .main-content {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .main-content.visible {
    opacity: 1;
  }

  .typing-text {
    display: inline-block;
    width: 0;
    white-space: nowrap;
    overflow: hidden;
    border-right: 2px solid #64ffda;
    animation: typing 2s steps(30, end) forwards,
               blink-caret 0.75s step-end infinite;
  }

  .progress-bar {
    width: 0%;
    animation: progress 3s ease-in-out forwards;
  }

  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }

  @keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: #64ffda }
  }

  @keyframes progress {
    0% { width: 0% }
    50% { width: 70% }
    100% { width: 100% }
  }

  /* New Animation Styles */
  .animate-title h1 {
    animation: slideDown 0.8s ease-out forwards;
  }

  .animate-slide-up {
    animation: slideUp 0.8s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .main-card {
    animation: fadeScale 1s ease-out forwards;
  }

  .achievements-grid {
    perspective: 1000px;
  }

  .achievement-card {
    transform-style: preserve-3d;
    transition: all 0.5s ease;
  }

  .icon-float {
    animation: iconFloat 3s ease-in-out infinite;
  }

  .content-fade-in {
    animation: contentFade 0.5s ease-out forwards;
  }

  .skill-item {
    opacity: 0;
    animation: skillSlide 0.5s ease-out forwards;
  }

  .animate-gradient {
    background: linear-gradient(90deg, #4f46e5, #7c3aed, #db2777);
    background-size: 200% auto;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: gradientFlow 3s linear infinite;
  }

  .animate-bounce-x {
    animation: bounceX 1s infinite;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes iconFloat {
    0%, 100% {
      transform: translateY(0) rotate(0);
    }
    50% {
      transform: translateY(-10px) rotate(10deg);
    }
  }

  @keyframes contentFade {
    from {
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes skillSlide {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes gradientFlow {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  @keyframes bounceX {
    0%, 100% { transform: translateX(0); }
    50% { transform: translateX(5px); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Three.js scene for the cube
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    
    renderer.setSize(128, 128);
    document.getElementById('cube-container').appendChild(renderer.domElement);
    
    // Create cube
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const material = new THREE.MeshBasicMaterial({
      color: 0x64ffda,
      wireframe: true
    });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);
    
    camera.position.z = 2;
    
    // Animation function
    function animate() {
      requestAnimationFrame(animate);
      cube.rotation.x += 0.01;
      cube.rotation.y += 0.01;
      renderer.render(scene, camera);
    }
    animate();

    // Force the body and html to be fixed
    document.documentElement.classList.add('loading');
    document.body.classList.add('loading');
    
    // Store the current scroll position
    const scrollPosition = window.pageYOffset;
    document.body.style.top = `-${scrollPosition}px`;
    
    const mainContent = document.querySelector('.main-content');
    mainContent.style.opacity = '0';

    setTimeout(function() {
      const loader = document.getElementById('loader');
      loader.classList.add('fade-out');
      
      setTimeout(() => {
        loader.style.display = 'none';
        mainContent.style.opacity = '1';
        
        // Re-enable scrolling and restore position
        document.documentElement.classList.remove('loading');
        document.body.classList.remove('loading');
        document.body.style.top = '';
        window.scrollTo(0, scrollPosition);

        // Initialize 3D effects for content
        initializeContentAnimations();
      }, 500);
    }, 4000);

    // Initialize skill items with staggered animation
    const skillItems = document.querySelectorAll('.skill-item');
    skillItems.forEach((item, index) => {
      item.style.animationDelay = `${index * 0.2}s`;
    });

    // Initialize achievement cards with tilt effect
    const cards = document.querySelectorAll('[data-tilt]');
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const xRotation = ((y - rect.height / 2) / rect.height) * 10;
        const yRotation = ((x - rect.width / 2) / rect.width) * 10;
        
        card.style.transform = `perspective(1000px) rotateX(${-xRotation}deg) rotateY(${yRotation}deg) scale(1.05)`;
        card.style.transition = 'transform 0.1s';
      });
      
      card.addEventListener('mouseleave', () => {
        card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale(1)';
        card.style.transition = 'transform 0.5s';
      });
    });
  });

  function initializeContentAnimations() {
    // Add 3D hover effects to achievement cards
    const cards = document.querySelectorAll('.achievement-card');
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const xRotation = ((y - rect.height / 2) / rect.height) * 20;
        const yRotation = ((x - rect.width / 2) / rect.width) * 20;
        
        gsap.to(card, {
          duration: 0.5,
          rotateX: -xRotation,
          rotateY: yRotation,
          scale: 1.05,
          ease: 'power2.out',
          transformPerspective: 1000
        });
      });
      
      card.addEventListener('mouseleave', () => {
        gsap.to(card, {
          duration: 0.5,
          rotateX: 0,
          rotateY: 0,
          scale: 1,
          ease: 'power2.out'
        });
      });
    });
  }
</script>

<!-- Main Content -->
<div class="main-content opacity-100">
  <div class="max-w-4xl mx-auto">
    <div class="text-center mb-12 fade-in-up animate-title">
      <h1 class="text-5xl font-bold gradient-text mb-4 transform hover:scale-110 transition-transform duration-300">Deepan Kumar</h1>
      <p class="text-xl text-gray-400 animate-slide-up">Building scalable web applications with modern technologies</p>
    </div>

    <div class="bg-gray-800/95 shadow-lg rounded-lg p-8 mb-8 hover-scale fade-in transform hover:rotate-y-12 transition-all duration-500 main-card">
      <div class="flex flex-col items-center gap-8">
        <!-- 3D Profile Image Container -->
        <div id="profile-3d-container" class="w-full md:w-96 h-96 relative perspective-1000">
          <div class="profile-3d-wrapper w-full h-full transition-transform duration-1000 transform-style-preserve-3d">
            <div class="absolute w-full h-full rounded-full overflow-hidden shadow-lg backface-hidden">
              <%= image_tag asset_path('profile.jpg'), alt: "Deepan Kumar", class: "w-full h-full object-cover transform scale-100 hover:scale-110 transition-transform duration-500", id: "profile-image", onerror: "this.onerror=null; console.log('Image failed to load');" %>
            </div>
            <div class="absolute w-full h-full rounded-full overflow-hidden shadow-lg backface-hidden rotate-y-180 bg-gradient-to-br from-violet-600 to-blue-600 flex items-center justify-center">
              <div class="text-white text-center p-8">
                <h3 class="text-2xl font-bold mb-4">Staff Engineer</h3>
                <p class="text-lg">Passionate about creating scalable and efficient web solutions</p>
              </div>
            </div>
          </div>
        </div>
        <p class="text-gray-300 mb-4 text-center max-w-2xl">
          Staff Engineer with over 8 years of experience in building high-performance web applications. 
          Specialized in Ruby on Rails, Hotwire, and distributed systems. Strong focus on technical leadership 
          and architectural decisions.
        </p>
      </div>

      <style>
        .perspective-1000 {
          perspective: 1000px;
        }
        
        .transform-style-preserve-3d {
          transform-style: preserve-3d;
        }
        
        .backface-hidden {
          backface-visibility: hidden;
        }
        
        .rotate-y-180 {
          transform: rotateY(180deg);
        }
        
        #profile-3d-container:hover .profile-3d-wrapper {
          transform: rotateY(180deg);
        }

        #profile-image {
          animation: float 6s ease-in-out infinite;
          transform-origin: center;
          will-change: transform;
          object-fit: cover;
          width: 100%;
          height: 100%;
        }

        @keyframes float {
          0% {
            transform: translateY(0px) scale(1);
          }
          50% {
            transform: translateY(-20px) scale(1.05);
          }
          100% {
            transform: translateY(0px) scale(1);
          }
        }
      </style>

      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Debug image loading
          const img = document.getElementById('profile-image');
          if (img) {
            console.log('Image element found');
            console.log('Image source:', img.src);
            img.addEventListener('load', () => console.log('Image loaded successfully'));
            img.addEventListener('error', () => console.log('Image failed to load'));
          } else {
            console.log('Image element not found');
          }

          const container = document.getElementById('profile-3d-container');
          const wrapper = container.querySelector('.profile-3d-wrapper');
          let isFlipped = false;
          
          container.addEventListener('mousemove', (e) => {
            if (isFlipped) return;
            
            const rect = container.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const rotateX = ((y - centerY) / 10).toFixed(2);
            const rotateY = ((x - centerX) / 10).toFixed(2);
            
            wrapper.style.transform = `perspective(1000px) rotateX(${-rotateX}deg) rotateY(${rotateY}deg)`;
          });
          
          container.addEventListener('mouseleave', () => {
            if (!isFlipped) {
              wrapper.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
            }
          });

          container.addEventListener('click', () => {
            isFlipped = !isFlipped;
            if (isFlipped) {
              wrapper.style.transform = 'perspective(1000px) rotateY(180deg)';
            } else {
              wrapper.style.transform = 'perspective(1000px) rotateY(0)';
            }
          });
        });
      </script>

      <div class="mt-12 mb-8">
        <h3 class="font-semibold mb-6 text-xl gradient-text animate-gradient">Key Achievements</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 achievements-grid">
          <div class="achievement-card card-base p-6 rounded-lg" data-tilt data-tilt-max="10" data-tilt-speed="400" data-tilt-glare data-tilt-max-glare="0.5">
            <div class="flex items-start space-x-4">
              <div class="icon-container p-2 bg-violet-900/30 rounded-lg transform hover:rotate-12 transition-transform icon-float">
                <svg class="w-6 h-6 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                </svg>
              </div>
              <div class="content-fade-in">
                <h4 class="text-lg font-semibold text-gray-200">Performance Optimization</h4>
                <p class="text-gray-400">Improved application response time by 60% through strategic caching and database optimizations</p>
              </div>
            </div>
          </div>

          <div class="achievement-card card-base p-6 rounded-lg" data-tilt data-tilt-max="10" data-tilt-speed="400" data-tilt-glare data-tilt-max-glare="0.5">
            <div class="flex items-start space-x-4">
              <div class="icon-container p-2 bg-violet-900/30 rounded-lg transform hover:rotate-12 transition-transform icon-float">
                <svg class="w-6 h-6 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                </svg>
              </div>
              <div class="content-fade-in">
                <h4 class="text-lg font-semibold text-gray-200">Team Leadership</h4>
                <p class="text-gray-400">Led a team of 8 developers, delivering 3 major projects ahead of schedule</p>
              </div>
            </div>
          </div>

          <div class="achievement-card card-base p-6 rounded-lg" data-tilt data-tilt-max="10" data-tilt-speed="400" data-tilt-glare data-tilt-max-glare="0.5">
            <div class="flex items-start space-x-4">
              <div class="icon-container p-2 bg-violet-900/30 rounded-lg transform hover:rotate-12 transition-transform icon-float">
                <svg class="w-6 h-6 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
              </div>
              <div class="content-fade-in">
                <h4 class="text-lg font-semibold text-gray-200">System Architecture</h4>
                <p class="text-gray-400">Designed and implemented microservices architecture handling 1M+ daily requests</p>
              </div>
            </div>
          </div>

          <div class="achievement-card card-base p-6 rounded-lg" data-tilt data-tilt-max="10" data-tilt-speed="400" data-tilt-glare data-tilt-max-glare="0.5">
            <div class="flex items-start space-x-4">
              <div class="icon-container p-2 bg-violet-900/30 rounded-lg transform hover:rotate-12 transition-transform icon-float">
                <svg class="w-6 h-6 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                </svg>
              </div>
              <div class="content-fade-in">
                <h4 class="text-lg font-semibold text-gray-200">Security & Compliance</h4>
                <p class="text-gray-400">Implemented robust security measures and achieved SOC 2 compliance</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 skills-section">
        <div class="skill-container" data-tilt>
          <h3 class="font-semibold mb-4 text-lg gradient-text animate-gradient">Core Skills</h3>
          <div class="space-y-3">
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">Ruby on Rails & Hotwire</span>
            </div>
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">System Architecture</span>
            </div>
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">Technical Leadership</span>
            </div>
          </div>
        </div>

        <div class="skill-container" data-tilt>
          <h3 class="font-semibold mb-4 text-lg gradient-text animate-gradient">Specialties</h3>
          <div class="space-y-3">
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">Full Stack Development</span>
            </div>
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">API Design & Integration</span>
            </div>
            <div class="skill-item flex items-center transform hover:translate-x-2 transition-transform">
              <svg class="w-5 h-5 mr-2 text-violet-400 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span class="text-gray-300 hover:text-violet-400 transition-colors">Performance Optimization</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="flex justify-center space-x-4 fade-in">
      <%= link_to projects_path, class: "btn-base btn-gradient text-white px-8 py-3 rounded-lg transition-all duration-300 transform hover:-translate-y-1 hover:scale-105 animate-float" do %>
        <span class="flex items-center">
          View Projects
          <svg class="w-5 h-5 ml-2 animate-bounce-x" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </span>
      <% end %>
      
      <%= link_to contact_path, class: "contact-btn btn-base bg-gray-700 text-white px-8 py-3 rounded-lg hover:bg-gray-800 transition duration-300 transform hover:-translate-y-1" do %>
        <span class="flex items-center">
          Contact Me
          <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </span>
      <% end %>
      
      <button class="qr-btn btn-base bg-violet-600 text-white px-8 py-3 rounded-lg hover:bg-violet-700 transition duration-300 transform hover:-translate-y-1" onclick="generateQRCode()">
        <span class="flex items-center">
          Generate QR
          <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
          </svg>
        </span>
      </button>
    </div>
  </div>
</div>

<!-- QR Code Modal -->
<div id="qrModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="modal-content bg-gray-800 p-6 rounded-lg shadow-xl">
    <div id="qrcode" class="mb-4"></div>
    <button class="btn-base w-full bg-violet-600 text-white px-4 py-2 rounded hover:bg-violet-700" onclick="closeQRModal()">
      Close
    </button>
  </div>
</div>

<script>
function generateQRCode() {
  const modal = document.getElementById('qrModal');
  const qrcodeContainer = document.getElementById('qrcode');
  
  // Clear previous QR code
  qrcodeContainer.innerHTML = '';
  
  // Generate QR code
  new QRCode(qrcodeContainer, {
    text: window.location.href,
    width: 200,
    height: 200,
    colorDark: "#64ffda",
    colorLight: "#1e293b",
  });
  
  // Show modal with animation
  modal.classList.remove('hidden');
  setTimeout(() => {
    modal.classList.add('active');
  }, 10);
}

function closeQRModal() {
  const modal = document.getElementById('qrModal');
  modal.classList.remove('active');
  setTimeout(() => {
    modal.classList.add('hidden');
  }, 300);
}

// Close modal when clicking outside
document.getElementById('qrModal').addEventListener('click', function(e) {
  if (e.target === this) {
    closeQRModal();
  }
});
</script>

